#!/usr/bin/python3
# -*- coding: utf-8 -*-

import sys
import os
from glob import glob
from clang import cindex
import re

compilation_database_folder = os.path.dirname(os.path.abspath( __file__))+'/build'

add_flags = [
    '-I',
    '/usr/include/',
    '-I',
    '/usr/lib',
    '-I',
    '/usr/include/c++/9/',
]

# flags = default_flags
flags = []

def GetDatabase(path):
    if os.path.exists(path):
        return cindex.CompilationDatabase.fromDirectory(path)
    return None

SOURCE_EXTENSIONS = ['.cpp', '.cxx', '.cc', '.c', '.m', '.mm']

def DirectoryOfThisScript():
    return os.path.dirname(os.path.abspath(__file__))

def MakeRelativePathsInFlagsAbsolute(flags, working_directory):
    if not working_directory:
        return list(flags)
    new_flags = []
    make_next_absolute = False
    path_flags = ['-isystem', '-I', '-iquote', '--sysroot=']
    for flag in flags:
        new_flag = flag

        if make_next_absolute:
            make_next_absolute = False
            if not flag.startswith('/'):
                new_flag = os.path.join(working_directory, flag)

        for path_flag in path_flags:
            if flag == path_flag:
                make_next_absolute = True
                break

            if flag.startswith(path_flag):
                path = flag[len(path_flag):]
                new_flag = path_flag + os.path.join(working_directory, path)
                break

        if new_flag:
            new_flags.append(new_flag)
    return new_flags

def IsHeaderFile(filename):
    extension = os.path.splitext(filename)[1]
    return extension in ['.h', '.hxx', '.hpp', '.hh']

def GetCompilationInfoForHeaderSameDir(headerfile, database):
    """Return compile flags for src file with same base in the same directory
    """
    filename_no_ext = os.path.splitext(headerfile)[0]
    for extension in SOURCE_EXTENSIONS:
        replacement_file = filename_no_ext + extension
        if os.path.exists(replacement_file):
            compilation_info = database.GetCompilationInfoForFile(
                replacement_file)
            if compilation_info.compiler_flags_:
                return compilation_info
    return None

def GetCompilationInfoForFile(filename, database):
    # The compilation_commands.json file generated by CMake does not have
    # entries for header files. So we do our best by asking the db for flags
    # for a corresponding source file, if any. If one exists, the flags for
    # that file should be good enough.
    # Corresponding source file are looked for in the same package.

    cmds = database.getCompileCommands(filename)
    return cmds[0]
    # return database.GetCompilationInfoForFile(filename)

def Settings(**kwargs):
    filename = kwargs['filename']
    database = GetDatabase(compilation_database_folder)
    if database:
        # Bear in mind that compilation_info.compiler_flags_ does NOT return a
        # python list, but a "list-like" StringVec object
        compilation_info = GetCompilationInfoForFile(filename, database)
        if compilation_info:
            final_flags = MakeRelativePathsInFlagsAbsolute(
                compilation_info.arguments,
                compilation_info.directory)
            final_flags += add_flags
        else:
            final_flags = flags
    else:
        relative_to = DirectoryOfThisScript()
        final_flags = MakeRelativePathsInFlagsAbsolute(flags, relative_to)

    return {
        'flags': final_flags,
        'do_cache': True
    }

if __name__ == '__main__':
    fname = "~/git/minipix_uart_interface/software/example_interface/stm32f411/src/main.cpp"
    if len(sys.argv) > 1:
        fname = sys.argv[1]
    print(Settings(filename = fname))
